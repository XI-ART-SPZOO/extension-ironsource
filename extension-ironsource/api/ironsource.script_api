- name: ironsource
  type: table
  desc: Functions and constants for interacting with IronSource API

  members:

#*****************************************************************************************************

  - name: init
    type: function
    desc: Initialize the IronSource SDK

    parameters:
    - name: app_key
      type: string
      desc: App key you can get in the IronSource dashboard

#*****************************************************************************************************

  - name: set_callback
    type: function
    desc: Sets a callback function for receiving events from the SDK. Call `ironsource.set_callback(nil)`
          to remove callback

    parameters:
    - name: callback
      type: function
      desc: Callback function that is executed on any event in the SDK.

      parameters:
      - name: self
        type: object
        desc: The calling script instance

      - name: message_id
        type: number
        desc: "One of message types:
             `ironsource.MSG_INIT` initialization,
             `ironsource.MSG_INTERSTITIAL` message from Interstitial ad unit,
             `ironsource.MSG_REWARDED` message from Rewarded ad unit"

      - name: message
        type: table
        desc: A table holding the data. It always contains `event`, and also some other values depends on a message
        fields:
        - name: event
          type: number
          desc: "One of event types:
                `ironsource.EVENT_AD_AVAILABLE`,
                `ironsource.EVENT_AD_UNAVAILABLE`,
                `ironsource.EVENT_AD_OPENED`,
                `ironsource.EVENT_AD_CLOSED`,
                `ironsource.EVENT_AD_REWARDED`,
                `ironsource.EVENT_AD_CLICKED`,
                `ironsource.EVENT_AD_SHOW_FAILED`,
                `ironsource.EVENT_AD_READY`,
                `ironsource.EVENT_AD_SHOW_SUCCEEDED`,
                `ironsource.EVENT_AD_LOAD_FAILED`
                `ironsource.EVENT_JSON_ERROR`
                `ironsource.EVENT_INIT_COMPLETE`"
    examples:
    - desc: |-
              ```lua
              local function ironsource_callback(self, message_id, message)
                  callback_logger(self, message_id, message)
                  if message_id == ironsource.MSG_INIT then
                      if message.event == ironsource.EVENT_INIT_COMPLETE then
                          -- ironSource SDK is initialized
                          -- massage{}
                      end
                  elseif message_id == ironsource.MSG_REWARDED then
                      if message.event == ironsource.EVENT_AD_AVAILABLE then
                          -- Indicates that there's an available ad. 
                          -- The adInfo object includes information about the ad that was loaded successfully
                          -- massage{AdInfo}
                      elseif message.event == ironsource.EVENT_AD_UNAVAILABLE then
                          -- Indicates that no ads are available to be displayed
                          -- massage{}
                      elseif message.event == ironsource.EVENT_AD_OPENED then
                          -- The Rewarded Video ad view has opened. Your activity will loose focus
                          -- massage{AdInfo}
                      elseif message.event == ironsource.EVENT_AD_CLOSED then
                          -- The Rewarded Video ad view is about to be closed. Your activity will regain its focus
                          -- massage{AdInfo}
                      elseif message.event == ironsource.EVENT_AD_REWARDED then
                          -- The user completed to watch the video, and should be rewarded.
                          -- The placement parameter will include the reward data.
                          -- When using server-to-server callbacks, you may ignore this event and wait for the ironSource server callback
                          -- massage{AdInfo, Placement}
                      elseif message.event == ironsource.EVENT_AD_SHOW_FAILED then
                          -- The rewarded video ad was failed to show
                          -- massage{AdInfo, IronSourceError}
                      elseif message.event == ironsource.EVENT_AD_CLICKED then
                          -- Invoked when the video ad was clicked.
                          -- This callback is not supported by all networks, and we recommend using it 
                          -- only if it's supported by all networks you included in your build
                          -- massage{AdInfo, Placement}
                      end
                  elseif message_id == ironsource.MSG_INTERSTITIAL then
                      if message.event == ironsource.EVENT_AD_READY then
                          -- Invoked when the interstitial ad was loaded successfully.
                          -- AdInfo parameter includes information about the loaded ad
                          -- massage{AdInfo}
                      elseif message.event == ironsource.EVENT_AD_LOAD_FAILED then
                          -- Indicates that the ad failed to be loaded
                          -- massage{IronSourceError}
                      elseif message.event == ironsource.EVENT_AD_OPENED then
                          -- Invoked when the Interstitial Ad Unit has opened, and user left the application screen.
                          -- This is the impression indication.
                          -- massage{AdInfo}
                      elseif message.event == ironsource.EVENT_AD_CLOSED then
                          -- Invoked when the interstitial ad closed and the user went back to the application screen.
                          -- massage{AdInfo}
                      elseif message.event == ironsource.EVENT_AD_SHOW_FAILED then
                          -- Invoked when the ad failed to show
                          -- massage{AdInfo, IronSourceError}
                      elseif message.event == ironsource.EVENT_AD_CLICKED then
                          -- Invoked when end user clicked on the interstitial ad
                          -- massage{AdInfo}
                      elseif message.event == ironsource.EVENT_AD_SHOW_SUCCEEDED then
                          -- Invoked before the interstitial ad was opened, and before the InterstitialOnAdOpenedEvent is reported.
                          -- This callback is not supported by all networks, and we recommend using it only if
                          -- it's supported by all networks you included in your build.
                          -- massage{AdInfo}
                      end
                  end
              end
              ```

#*****************************************************************************************************

  - name: set_consent
    type: function
    desc: If the user provided consent, set the following flag to true (must be called before `ironsource.init()`).
          [Original docs](https://developers.is.com/ironsource-mobile/general/making-sure-youre-compliant-post-gdpr/#step-2)
          [Android](https://developers.is.com/ironsource-mobile/android/regulation-advanced-settings/),
          [iOS](https://developers.is.com/ironsource-mobile/ios/regulation-advanced-settings/)

    parameters:
    - name: is_consent_provided
      type: boolean

#*****************************************************************************************************

  - name: validate_integration
    type: function
    desc: The ironSource SDK provides an easy way to verify that you’ve successfully integrated the ironSource SDK and any
          additional adapters; it also makes sure all required dependencies and frameworks were added for the various mediated ad networks.
          The Integration Helper will now also portray the compatibility between the SDK and adapter versions. 
          Original docs
          [Android](https://developers.is.com/ironsource-mobile-android/integration-helper-android/),
          [iOS](https://developers.is.com/ironsource-mobile/ios/integration-helper-ios/)

#*****************************************************************************************************

  - name: set_metadata
    type: function
    desc: Function used for setting different parameterd for adapters and the SDK itself.

    parameters:
    - name: key
      type: String

    - name: value
      type: String

#*****************************************************************************************************

  - name: set_user_id
    type: function
    desc: If you’re serving the offerwall ad unit or using server-to-server callbacks to reward your users with
          ironSource SDK rewarded ad units, you must define a unique identifier for each user (“UserID”),
          using the setUserID method.

          Set the UserID before the init request, to make sure you avoid any data loses, related to the user. Use a unique identifier, with up to 64 alphanumeric characters.
          
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/advanced-settings/),
          [iOS](https://developers.is.com/ironsource-mobile/ios/advanced-settings-2/)

    parameters:
    - name: user_id
      type: string
      desc: 

#*****************************************************************************************************

  - name: launch_test_suite
    type: function
    desc: The LevelPlay integration test suite enables you to quickly and easily test your app’s integration,
          verify platform setup and review ads related to your configured networks.
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/unity-levelplay-test-suite/#step-1),
          [iOS](https://developers.is.com/ironsource-mobile/ios/unity-levelplay-test-suite/)

#*****************************************************************************************************

  - name: set_adapters_debug
    type: function
    desc: Manage the debug logs for your integrated mediation ad networks with this boolean.
          When set to TRUE it enables debug logs to help you troubleshoot issues with all of
          the mediation ad networks that permit to do so. Remove this code before your app goes
          live with our ad units!

    returns:
    - name: is_debug
      type: boolean

#*****************************************************************************************************

  - name: load_consent_view
    type: function
    desc: iOS Only. Load the IronSource permission pop-up.
          [iOS](https://developers.is.com/ironsource-mobile/ios/unity-levelplay-test-suite/)

    returns:
    - name: consent_view_type
      type: string
      desc: one of the folowing values "pre" or "post" 

#*****************************************************************************************************

  - name: show_consent_view
    type: function
    desc: iOS Only. Display the IronSource permission pop-up.
          [iOS](https://developers.is.com/ironsource-mobile/ios/unity-levelplay-test-suite/)

    returns:
    - name: consent_view_type
      type: string
      desc: one of the folowing values "pre" or "post" 

#*****************************************************************************************************

  - name: should_track_network_state
    type: function
    desc: You can determine and monitor the internet connection on the user’s device through the ironSource Network
          Change Status function. This enables the SDK to change its availability according to network modifications,
          i.e. in the case of no network connection, the availability will turn to FALSE.
          The default of this function is false; if you’d like to listen to it for changes in connectivity,
          activate it in the SDK initialization
          [Android shouldTrackNetworkState](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-1),
          [iOS shouldTrackReachability](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-1)

    parameters:
    - name: should_track
      type: boolean

#*****************************************************************************************************

  - name: is_rewarded_video_available
    type: function
    desc: You can receive the availability status of the AD Unit through the callback. Alternatively,
          ask for ad availability directly by calling this function.
          [Android](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-1),
          [iOS](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-1)

    returns:
    - name: is_available
      type: boolean

#*****************************************************************************************************

  - name: show_rewarded_video
    type: function
    desc: You can show a video ad to your users and define the exact Placement you want to show an ad.
          The Reward settings of this Placement will be pulled from the ironSource server.
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-1),
          [iOS](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-1)

    parameters:
    - name: placement_name
      type: String
      desc: maybe nil - then default placement used

#*****************************************************************************************************

  - name: get_rewarded_video_placement_info
    type: function
    desc: Get details about the specific Reward associated with each Ad Placement.
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-1),
          [iOS](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-1)

    parameters:
    - name: placement_name
      type: String

#*****************************************************************************************************
  
  - name: get_rewarded_video_placement_info
    type: function
    desc: Get details about the specific Reward associated with each Ad Placement.
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-1),
          [iOS](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-1)

    parameters:
    - name: placement_name
      type: String

    returns:
    - name: placement
      type: table
      desc: contains the following fields `placement_id`, `placement_name`, `is_default`, `reward_name`, `reward_amount`

#*****************************************************************************************************
  
  - name: is_rewarded_video_placement_capped
    type: function
    desc: To ensure you don’t show the traffic driver (Rewarded Video button) to prompt the user to watch
          an ad when the placement is capped, you must call the below method to verify if a specific placement
          has reached its ad limit. When requesting availability, you might receive a TRUE response but in the case your placement has reached its capping limit, the ad will not be served to the user.
          Original docs
          [Android isRewardedVideoPlacementCapped](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-2),
          [iOS isRewardedVideoCappedForPlacement](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-2)

    parameters:
    - name: placement_name
      type: String

    returns:
    - name: is_capped
      type: boolean

#*****************************************************************************************************
  
  - name: set_dynamic_user_id
    type: function
    desc: The Dynamic UserID is a parameter to verify AdRewarded transactions and can be changed throughout the session.
          To receive this parameter through the server to server callbacks, it must be set before calling showRewardedVideo.
          You will receive a dynamicUserId parameter in the callback URL with the reward details. 
          [Android](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-2),
          [iOS](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-2)

    parameters:
    - name: dynamic_user_id
      type: String

#*****************************************************************************************************
  
  - name: load_interstitial
    type: function
    desc: We recommend requesting an Interstitial Ad a short while before you plan on showing it to your
          users as the loading process can take time.
          [Android](https://developers.is.com/ironsource-mobile/android/interstitial-mediation-integration-android/#step-2),
          [iOS](https://developers.is.com/ironsource-mobile/ios/interstitial-integration-ios/#step-2)

#*****************************************************************************************************

  - name: is_interstitial_ready
    type: function
    desc: You can receive the availability status of the AD Unit through the callback. Alternatively,
          ask for ad availability directly by calling this function.
          [Android](https://developers.is.com/ironsource-mobile/android/interstitial-mediation-integration-android/#step-2),
          [iOS](https://developers.is.com/ironsource-mobile/ios/interstitial-integration-ios/#step-2)

    returns:
    - name: is_ready
      type: boolean

#*****************************************************************************************************
  
  - name: get_interstitial_placement_info
    type: function
    desc: Android Only. Get details about the specific Ad Placement.
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/interstitial-mediation-integration-android/#step-3),
          [iOS](https://developers.is.com/ironsource-mobile/ios/interstitial-integration-ios/#step-3)

    parameters:
    - name: placement_name
      type: String

    returns:
    - name: interstitial_placement
      type: table
      desc: contains the following fields `placement_id`, `placement_name`, `is_default`

#*****************************************************************************************************
  
  - name: is_interstitial_placement_capped
    type: function
    desc: In addition to LevelPlay‘s Ad Placements, you can now configure capping and pacing settings for
          selected placements. Capping and pacing improve the user experience in your app by limiting
          the number of ads served within a defined timeframe.
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/interstitial-mediation-integration-android/#step-3),
          [iOS](https://developers.is.com/ironsource-mobile/ios/interstitial-integration-ios/#step-3)

    parameters:
    - name: placement_name
      type: String

    returns:
    - name: is_capped
      type: boolean

#*****************************************************************************************************

  - name: show_interstitial
    type: function
    desc: Serve an Interstitial ad to your users. Call it once you receive the ironsource.EVENT_AD_READY callback,
          you are ready to show an Interstitial Ad to your users. To provide the best experience for your users,
          make sure to pause any game action, including audio, during the time the ad is displayed.
          Original docs
          [Android](https://developers.is.com/ironsource-mobile/android/rewarded-video-integration-android/#step-1),
          [iOS](https://developers.is.com/ironsource-mobile/ios/rewarded-video-integration-ios/#step-1)

    parameters:
    - name: placement_name
      type: String
      desc: maybe nil - then default placement used

#*****************************************************************************************************

  - name: MSG_INTERSTITIAL
    type: number

  - name: MSG_REWARDED
    type: number

  - name: MSG_CONSENT
    type: number

  - name: MSG_INIT
    type: number

#*****************************************************************************************************

  - name: EVENT_AD_AVAILABLE
    type: number

  - name: EVENT_AD_UNAVAILABLE
    type: number

  - name: EVENT_AD_OPENED
    type: number

  - name: EVENT_AD_CLOSED
    type: number

  - name: EVENT_AD_REWARDED
    type: number

  - name: EVENT_AD_CLICKED
    type: number

  - name: EVENT_AD_SHOW_FAILED
    type: number

  - name: EVENT_AD_READY
    type: number

  - name: EVENT_AD_SHOW_SUCCEEDED
    type: number

  - name: EVENT_AD_LOAD_FAILED
    type: number

  - name: EVENT_JSON_ERROR
    type: number

  - name: EVENT_INIT_COMPLETE
    type: number

  - name: EVENT_CONSENT_LOADED
    type: number

  - name: EVENT_CONSENT_SHOWN
    type: number

  - name: EVENT_CONSENT_LOAD_FAILED
    type: number

  - name: EVENT_CONSENT_SHOW_FAILED
    type: number

#*****************************************************************************************************
