if not ironsource then
    error("Extension works only on IOS and Android")
    return
end

local log = require("example.log")
local ui = require("example.ui")
local callback = require("example.callback")
local dirtylarry = require("dirtylarry.dirtylarry")

local INT_PLACEMENT = "DefaultInterstitial"
local REW_PLACEMENT = "DefaultRewardedVideo"

local data = {
    ["menu"] = { type = "menu",
        ["main"] = {},
        ["interstitial"] = {},
        ["rewarded"] = {},
        ["banner"] = {},
    },
    ["main_page"] = { type = "page",
        ["init"] = {},
        ["validate"] = {},
        ["test_suite"] = {},
        ["auto_test"] = {},
        ["load_consent"] = {},
        ["show_consent"] = {},
    },
    ["interstitial_page"] = { type = "page",
        ["load_interstitial"] = {},
        ["is_interstitial_ready"] = {},
        ["get_interstitial_placement_info"] = {},
        ["is_interstitial_placement_capped"] = {},
        ["show_interstitial"] = {},
    },
    ["rewarded_page"] = { type = "page",
        ["should_track_network_state"] = {},
        ["is_rewarded_video_available"] = {},
        ["show_rewarded_video"] = {},
        ["get_rewarded_video_placement_info"] = {},
        ["is_rewarded_video_placement_capped"] = {},
        ["set_dynamic_user_id"] = {},
    },
    ["banner_page"] = { type = "page",
    }
}

local actions = {}
actions.main = function(self, el)
    ui.disable_all(self.ui, "page")
    ui.enable(self.ui.main_page, true)
end
actions.interstitial = function(self, el)
    ui.disable_all(self.ui, "page")
    ui.enable(self.ui.interstitial_page, true)
end
actions.rewarded = function(self, el)
    ui.disable_all(self.ui, "page")
    ui.enable(self.ui.rewarded_page, true)
end
actions.banner = function(self, el)
    ui.disable_all(self.ui, "page")
    ui.enable(self.ui.banner_page, true)
end
actions.init = function(self, el)
    ironsource.set_user_id("UserID");
    ironsource.set_consent(true)
    ironsource.set_adapters_debug(true)
    ironsource.set_metadata("is_test_suite", "enable")
    local sysinfo = sys.get_sys_info()
    if sysinfo.system_name == "Android" then
        ironsource.init("19bfef645")
    elseif sysinfo.system_name == "iPhone OS" then
        ironsource.init("1a349ce5d")
    end
end
actions.validate = function(self, el)
    ironsource.validate_integration()
end
actions.test_suite = function(self, el)
    ironsource.launch_test_suite()
end
actions.auto_test = function(self, el)
    --TODO:run auto-tests
    print("Not implemented yet!")
end
actions.load_consent = function(self, el)
    ironsource.load_consent_view("pre")
end
actions.show_consent = function(self, el)
    ironsource.show_consent_view("pre")
end
actions.load_interstitial = function(self, el)
    ironsource.load_interstitial()
end
actions.is_interstitial_ready = function(self, el)
    print("is_interstitial_ready: ", ironsource.is_interstitial_ready())
end
actions.get_interstitial_placement_info = function(self, el)
    local msg = log.get_table_as_str(ironsource.get_interstitial_placement_info(INT_PLACEMENT))
    print(tostring(msg))
end
actions.is_interstitial_placement_capped = function(self, el)
    print(ironsource.is_interstitial_placement_capped(INT_PLACEMENT))
end
actions.show_interstitial = function(self, el)
    sound.set_group_gain("master", 0)
    ironsource.show_interstitial(self.next_int_placement)
    print("show: " .. tostring(self.next_int_placement))
    if self.next_int_placement == INT_PLACEMENT then
        self.next_int_placement = nil
    else
        self.next_int_placement = INT_PLACEMENT
    end
end
actions.should_track_network_state = function(self, el)
    ironsource.should_track_network_state(true)
end
actions.is_rewarded_video_available = function(self, el)
    print("is_rewarded_video_available: ", ironsource.is_rewarded_video_available())
end
actions.show_rewarded_video = function(self, el)
    sound.set_group_gain("master", 0)
    ironsource.show_rewarded_video(self.next_rew_placement)
    print("show: " .. tostring(self.next_rew_placement))
    if self.next_rew_placement == REW_PLACEMENT then
        self.next_rew_placement = nil
    else
        self.next_rew_placement = REW_PLACEMENT
    end
end
actions.get_rewarded_video_placement_info = function(self, el)
    local msg = log.get_table_as_str(ironsource.get_rewarded_video_placement_info(REW_PLACEMENT))
    print(tostring(msg))
end
actions.is_rewarded_video_placement_capped = function(self, el)
    print(ironsource.is_rewarded_video_placement_capped(REW_PLACEMENT))
end
actions.set_dynamic_user_id = function(self, el)
    ironsource.set_dynamic_user_id("custom_user_id")
end

function init(self)
    log.print_all_sdk_ent()
    self.console = gui.get_node("console")
    self.ui = ui.fill_tree(data, actions)
    ui.enable(self.ui.main_page, true)

    -- if IDFA doesn't supported (ios < 14 or android) then hide buttons
    local need_to_show = ironsource.MSG_IDFA and (ironsource.get_idfa_status() == ironsource.EVENT_STATUS_NOT_DETERMINED)
    if not need_to_show then
        ui.enable(self.ui.load_consent, false)
        ui.enable(self.ui.show_consent, false)
    end
    msg.post(".", "acquire_input_focus")
    callback.set()
    msg.post("#sound", "play_sound")
end

function update(self, dt)
    log.update(self.console)
end

function on_input(self, action_id, action)
    for name, el in pairs(self.ui) do
        if ui.is_button(el) and ui.is_enabled(el) then
            dirtylarry:button(el.name, action_id, action, function()
                print("click: "..el.name)
                actions[el.name](self, el)
            end)
        end
    end
end
